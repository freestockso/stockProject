package com.cqq.stock.util;

import com.cqq.stock.able.KdjAble;
import com.cqq.stock.entity.dto.DailyResult;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * kdj的计算公式
 *
 * @author qiqi.chen
 */
public class KdjUtil {

    private int n;
    private int m;
    private int l;

    public KdjUtil() {
        this.n = 14;
        this.m = 3;
        this.l = 3;
    }

    public <T extends KdjAble> void calculate(List<T> list) {
        List<Double> highest = new ArrayList<>();
        List<Double> lowest = new ArrayList<>();
        for (int i = 0; i < n - 1; i++) {
            highest.add(null);
            lowest.add(null);
        }
        for (int i = n - 1; i < list.size(); i++) {
            double maxValue = list.get(i).kdjHigh();
            double minValue = list.get(i).kdjLow();
            for (int j = 1; j < n; j++) {
                maxValue = Math.max(maxValue, list.get(i - j).kdjHigh());
                minValue = Math.min(minValue, list.get(i - j).kdjLow());
            }
            highest.add(maxValue);
            lowest.add(minValue);
        }

        List<Double> kLine = calculateK(list, highest, lowest);
        List<Double> dLine = calculateD(kLine);
        List<Double> jLine = calculateJ(kLine, dLine);
        for (int i = 0; i < kLine.size(); i++) {
            T t = list.get(i);
            if (kLine.get(i) != null) {
                t.changeK(kLine.get(i));
            }
            if (dLine.get(i) != null) {
                t.changeD(dLine.get(i));
            }
            if (jLine.get(i) != null) {
                t.changeJ(jLine.get(i));
            }
        }
    }

    private List<Double> calculateJ(List<Double> kLine, List<Double> dLine) {
        List<Double> jLine = new ArrayList<>();
        for (int i = 0; i < n + m - 2; i++) {
            jLine.add(null);
        }

        for (int i = n + m - 2; i < kLine.size(); i++) {
            jLine.add(kLine.get(i) * l - dLine.get(i) * (l - 1));
        }
        return jLine;
    }

    private List<Double> calculateD(List<Double> kLine) {
        List<Double> dLine = new ArrayList<>();
        for (int i = 0; i < n + m - 2; i++) {
            dLine.add(null);
        }
        for (int i = n + m - 2; i < kLine.size(); i++) {
            double sum = 0;
            for (int j = 0; j < m; j++) {
                sum += kLine.get(i - j);
            }
            dLine.add(sum / m);
        }
        return dLine;
    }

    private <T extends KdjAble> List<Double> calculateK(List<T> list, List<Double> highest, List<Double> lowest) {
        List<Double> kList = new ArrayList<>();
        for (int i = 0; i < n - 1; i++) {
            kList.add(null);
        }
        for (int i = n - 1; i < list.size(); i++) {
            Double close = list.get(i).kdjClose();
            Double high = highest.get(i);
            Double low = lowest.get(i);
            Double k = (close - low) / (high - low) * 100.0;
            kList.add(k);
        }
        return kList;
    }

    public static void main(String[] args) {

        double[][] d = new double[][]{

                {9.42, 9.16, 9.19},
                {9.33, 9.15, 9.28},
                {9.82, 9.22, 9.75},
                {9.85, 9.63, 9.74},
                {9.74, 9.62, 9.66},
                {10.08, 9.70, 9.94},
                {10.20, 9.86, 10.10},
                {10.22, 10.05, 10.20},
                {10.25, 10.07, 10.11},
                {10.28, 10.09, 10.24},
                {10.50, 10.23, 10.48},
                {10.57, 10.17, 10.25},
                {10.49, 10.28, 10.43},
                {10.47, 10.32, 10.34},
                {10.44, 10.26, 10.28},
                {10.47, 10.29, 10.35},
                {10.55, 10.37, 10.52},
                {11.04, 10.55, 11.00},
                {11.14, 10.88, 10.94},
                {11.07, 10.77, 11.00},
                {11.18, 10.86, 10.95},
                {11.20, 10.94, 11.10},
                {11.25, 10.96, 11.20},
                {11.21, 10.97, 11.21},
                {11.31, 11.03, 11.19},
                {11.41, 11.12, 11.38},
                {11.33, 11.19, 11.25},
                {11.23, 10.90, 10.95},
                {11.36, 11.04, 11.36},
                {11.62, 11.24, 11.27},
                {11.53, 11.25, 11.41},
                {11.55, 11.28, 11.36},
                {11.57, 11.15, 11.54},
                {12.64, 11.57, 12.55},
                {12.57, 12.15, 12.20},
                {12.66, 12.15, 12.40},
                {12.61, 12.27, 12.36},
                {12.78, 12.20, 12.76},
                {13.38, 12.62, 12.99},
                {13.29, 12.84, 13.06},
                {13.15, 12.84, 13.08},
                {13.06, 12.55, 12.74},
                {12.70, 12.25, 12.30},
                {12.49, 12.05, 12.32},
                {12.64, 12.24, 12.36},
                {12.55, 12.13, 12.37},
                {12.62, 12.27, 12.43},
                {12.68, 12.34, 12.50},
                {12.94, 12.32, 12.91},
                {12.94, 12.61, 12.79},
                {12.88, 12.62, 12.75},
                {12.80, 12.58, 12.69},
                {12.74, 12.50, 12.59},
                {12.40, 12.10, 12.11},
                {12.29, 12.01, 12.10},
                {12.47, 12.18, 12.38},
                {12.31, 12.10, 12.22},
                {12.82, 12.21, 12.82},
                {13.55, 12.83, 13.18},
                {13.48, 13.23, 13.36},
                {13.45, 13.15, 13.44},
                {14.00, 13.43, 13.86},
                {14.43, 13.72, 13.96},
                {13.98, 13.75, 13.81},
                {13.88, 13.40, 13.73},
                {13.96, 13.49, 13.54},
                {13.59, 13.21, 13.42},
                {14.09, 13.66, 13.69},
                {14.58, 13.55, 14.58},
                {14.59, 14.23, 14.35},
                {14.37, 14.11, 14.34},
                {14.80, 14.30, 14.73},
                {14.84, 14.08, 14.15},
                {14.20, 13.97, 14.07},
                {14.60, 14.16, 14.44},
                {14.64, 14.13, 14.13},
                {14.25, 13.70, 13.79},
                {14.33, 13.86, 14.10},
                {14.05, 13.59, 13.85},
                {13.35, 12.71, 12.87},
                {13.09, 12.72, 12.95},
                {12.91, 12.50, 12.60},
                {12.58, 12.05, 12.16},
                {12.75, 12.10, 12.68},
                {12.54, 12.23, 12.30},
                {12.75, 12.16, 12.49},
                {13.11, 12.57, 12.92},
                {12.99, 12.78, 12.85},
                {12.93, 12.36, 12.44},
                {12.54, 12.25, 12.38},
                {12.73, 12.36, 12.56},
                {12.57, 12.32, 12.40},
                {12.42, 12.14, 12.29},
                {12.45, 12.31, 12.35},
                {12.42, 11.93, 12.37},
                {12.55, 12.26, 12.49},
                {12.59, 12.26, 12.40},
                {12.38, 12.11, 12.22},
                {12.40, 12.11, 12.18},
                {12.33, 11.82, 11.90},
                {11.94, 11.60, 11.85},
                {12.14, 11.92, 11.97},
                {12.07, 11.89, 11.92},
                {12.47, 11.98, 12.34},
                {12.72, 12.30, 12.65},
                {12.66, 12.44, 12.57},
                {12.68, 12.43, 12.59},
                {12.69, 12.45, 12.49},
                {12.79, 12.48, 12.67},
                {12.85, 12.59, 12.80},
                {13.39, 13.01, 13.07},
                {13.95, 13.12, 13.80},
                {13.87, 13.58, 13.64},
                {13.83, 13.61, 13.69},
                {13.72, 13.07, 13.43},
                {13.65, 13.34, 13.52},
                {14.00, 13.60, 13.86},
                {13.94, 13.73, 13.93},
                {14.33, 14.02, 14.08},
                {14.39, 14.01, 14.33},
                {14.36, 14.02, 14.16},
                {14.43, 14.03, 14.14},
                {14.13, 13.84, 14.07},
                {14.03, 13.60, 13.74},
                {13.86, 13.59, 13.74},
                {13.85, 13.64, 13.71},
                {13.93, 13.68, 13.69},
                {14.38, 13.73, 14.27},
                {14.27, 13.99, 14.15},
                {14.14, 13.86, 13.90},
                {13.96, 13.76, 13.84},
                {13.96, 13.71, 13.82},
                {14.23, 13.83, 14.14},
                {14.17, 13.91, 14.00},
                {14.02, 13.80, 13.91},
                {14.16, 13.94, 14.03},
                {14.42, 14.00, 14.35},
                {14.40, 14.23, 14.38},
                {14.60, 14.33, 14.44},
                {14.70, 14.44, 14.52},
                {14.47, 14.23, 14.28},
                {14.34, 14.09, 14.25},
                {14.03, 13.81, 13.89},
                {13.79, 13.42, 13.50},
                {13.61, 13.18, 13.52},
                {13.79, 13.52, 13.69},
                {14.65, 14.00, 14.53},
                {15.00, 14.58, 14.67},
                {15.27, 14.75, 15.27},
                {15.23, 14.89, 15.04},
                {15.37, 14.95, 15.12},
                {15.11, 14.75, 15.09},
                {15.29, 14.93, 15.05},
                {15.09, 14.67, 15.07},
                {15.35, 14.92, 15.14},
                {15.04, 14.53, 14.60},
                {14.60, 14.35, 14.46},
                {14.89, 14.50, 14.80},
                {14.65, 14.30, 14.40},
                {14.63, 14.39, 14.46},
                {14.43, 14.20, 14.42},
                {14.39, 14.23, 14.28},
                {14.54, 14.25, 14.31},
                {14.65, 14.26, 14.60},
                {14.66, 14.40, 14.45},
                {14.65, 14.46, 14.59},
                {15.00, 14.70, 14.73},
                {14.96, 14.77, 14.96},
                {15.15, 14.75, 14.84},
                {14.79, 14.56, 14.70},
                {14.86, 14.61, 14.71},
                {14.93, 14.68, 14.83},
                {14.87, 14.55, 14.60},
                {14.60, 14.33, 14.39},
                {14.63, 14.39, 14.56},
                {15.04, 14.63, 14.99},
                {15.55, 15.08, 15.49},
                {15.62, 15.33, 15.53},
                {15.69, 15.33, 15.33},
                {16.00, 15.34, 15.90},
                {16.19, 15.81, 15.86},
                {16.15, 15.85, 16.05},
                {16.04, 15.72, 15.74},
                {16.38, 15.75, 16.35},
                {16.67, 16.17, 16.40},
                {16.42, 16.14, 16.39},
                {17.10, 16.35, 16.96},
                {17.75, 17.07, 17.37},
                {17.50, 16.97, 17.33},
                {17.59, 16.78, 16.94},
                {17.15, 16.70, 16.85},
                {17.19, 16.58, 16.66},
                {17.12, 16.58, 17.04},
                {17.08, 16.18, 16.57},
                {16.82, 16.38, 16.60},
                {17.15, 16.59, 17.02},
                {17.11, 16.73, 17.03},
                {17.19, 16.63, 16.81},
                {17.08, 16.71, 17.06},
                {17.11, 16.57, 16.58},
                {16.62, 16.39, 16.41},
                {17.15, 16.43, 17.01},
                {17.40, 16.92, 17.07},
                {17.59, 16.94, 17.30},
                {17.41, 17.03, 17.11},
                {17.22, 16.90, 17.04},
                {17.17, 16.79, 16.80},
                {16.68, 16.35, 16.43},
                {16.52, 16.31, 16.48},
                {16.61, 16.21, 16.48},
                {16.63, 16.40, 16.47},
                {16.70, 16.39, 16.49},
        };
        List<DailyResult> list = Arrays.stream(d).map(s -> {
            DailyResult dailyResult = new DailyResult();
            dailyResult.setHigh("" + s[0]);
            dailyResult.setLow("" + s[1]);
            dailyResult.setClose("" + s[2]);
            return dailyResult;
        }).collect(Collectors.toList());
        new KdjUtil().calculate(list);
        System.out.println(list);

    }
}
